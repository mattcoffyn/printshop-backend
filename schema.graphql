# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  addToCart(productId: ID): CartItem
  sendEmail(processProductId: ID): ProcessProduct
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createProcessProduct(data: ProcessProductCreateInput!): ProcessProduct
  createProcessProducts(data: [ProcessProductCreateInput!]!): [ProcessProduct]
  updateProcessProduct(
    where: ProcessProductWhereUniqueInput!
    data: ProcessProductUpdateInput!
  ): ProcessProduct
  updateProcessProducts(data: [ProcessProductUpdateArgs!]!): [ProcessProduct]
  deleteProcessProduct(where: ProcessProductWhereUniqueInput!): ProcessProduct
  deleteProcessProducts(
    where: [ProcessProductWhereUniqueInput!]!
  ): [ProcessProduct]
  createCartProcessProduct(
    data: CartProcessProductCreateInput!
  ): CartProcessProduct
  createCartProcessProducts(
    data: [CartProcessProductCreateInput!]!
  ): [CartProcessProduct]
  updateCartProcessProduct(
    where: CartProcessProductWhereUniqueInput!
    data: CartProcessProductUpdateInput!
  ): CartProcessProduct
  updateCartProcessProducts(
    data: [CartProcessProductUpdateArgs!]!
  ): [CartProcessProduct]
  deleteCartProcessProduct(
    where: CartProcessProductWhereUniqueInput!
  ): CartProcessProduct
  deleteCartProcessProducts(
    where: [CartProcessProductWhereUniqueInput!]!
  ): [CartProcessProduct]
  createFilmColour(data: FilmColourCreateInput!): FilmColour
  createFilmColours(data: [FilmColourCreateInput!]!): [FilmColour]
  updateFilmColour(
    where: FilmColourWhereUniqueInput!
    data: FilmColourUpdateInput!
  ): FilmColour
  updateFilmColours(data: [FilmColourUpdateArgs!]!): [FilmColour]
  deleteFilmColour(where: FilmColourWhereUniqueInput!): FilmColour
  deleteFilmColours(where: [FilmColourWhereUniqueInput!]!): [FilmColour]
  createFilmType(data: FilmTypeCreateInput!): FilmType
  createFilmTypes(data: [FilmTypeCreateInput!]!): [FilmType]
  updateFilmType(
    where: FilmTypeWhereUniqueInput!
    data: FilmTypeUpdateInput!
  ): FilmType
  updateFilmTypes(data: [FilmTypeUpdateArgs!]!): [FilmType]
  deleteFilmType(where: FilmTypeWhereUniqueInput!): FilmType
  deleteFilmTypes(where: [FilmTypeWhereUniqueInput!]!): [FilmType]
  createScanResolution(data: ScanResolutionCreateInput!): ScanResolution
  createScanResolutions(data: [ScanResolutionCreateInput!]!): [ScanResolution]
  updateScanResolution(
    where: ScanResolutionWhereUniqueInput!
    data: ScanResolutionUpdateInput!
  ): ScanResolution
  updateScanResolutions(data: [ScanResolutionUpdateArgs!]!): [ScanResolution]
  deleteScanResolution(where: ScanResolutionWhereUniqueInput!): ScanResolution
  deleteScanResolutions(
    where: [ScanResolutionWhereUniqueInput!]!
  ): [ScanResolution]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrderStatus(data: OrderStatusCreateInput!): OrderStatus
  createOrderStatuses(data: [OrderStatusCreateInput!]!): [OrderStatus]
  updateOrderStatus(
    where: OrderStatusWhereUniqueInput!
    data: OrderStatusUpdateInput!
  ): OrderStatus
  updateOrderStatuses(data: [OrderStatusUpdateArgs!]!): [OrderStatus]
  deleteOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  deleteOrderStatuses(where: [OrderStatusWhereUniqueInput!]!): [OrderStatus]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cart(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  role: Role
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  processProducts(
    where: ProcessProductWhereInput! = {}
    orderBy: [ProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProcessProduct!]
  processProductsCount(where: ProcessProductWhereInput! = {}): Int
  cartProcessProducts(
    where: CartProcessProductWhereInput! = {}
    orderBy: [CartProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartProcessProduct!]
  cartProcessProductsCount(where: CartProcessProductWhereInput! = {}): Int
  createdOn: DateTime
  updatedOn: DateTime
  history: JSON
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  cart: CartItemManyRelationFilter
  role: RoleWhereInput
  orders: OrderManyRelationFilter
  processProducts: ProcessProductManyRelationFilter
  cartProcessProducts: CartProcessProductManyRelationFilter
  createdOn: DateTimeNullableFilter
  updatedOn: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input ProcessProductManyRelationFilter {
  every: ProcessProductWhereInput
  some: ProcessProductWhereInput
  none: ProcessProductWhereInput
}

input CartProcessProductManyRelationFilter {
  every: CartProcessProductWhereInput
  some: CartProcessProductWhereInput
  none: CartProcessProductWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdOn: OrderDirection
  updatedOn: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  processProducts: ProcessProductRelateToManyForUpdateInput
  cartProcessProducts: CartProcessProductRelateToManyForUpdateInput
  createdOn: DateTime
  updatedOn: DateTime
  history: JSON
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input ProcessProductRelateToManyForUpdateInput {
  disconnect: [ProcessProductWhereUniqueInput!]
  set: [ProcessProductWhereUniqueInput!]
  create: [ProcessProductCreateInput!]
  connect: [ProcessProductWhereUniqueInput!]
}

input CartProcessProductRelateToManyForUpdateInput {
  disconnect: [CartProcessProductWhereUniqueInput!]
  set: [CartProcessProductWhereUniqueInput!]
  create: [CartProcessProductCreateInput!]
  connect: [CartProcessProductWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  orders: OrderRelateToManyForCreateInput
  processProducts: ProcessProductRelateToManyForCreateInput
  cartProcessProducts: CartProcessProductRelateToManyForCreateInput
  createdOn: DateTime
  updatedOn: DateTime
  history: JSON
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input ProcessProductRelateToManyForCreateInput {
  create: [ProcessProductCreateInput!]
  connect: [ProcessProductWhereUniqueInput!]
}

input CartProcessProductRelateToManyForCreateInput {
  create: [CartProcessProductCreateInput!]
  connect: [CartProcessProductWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  status: String
  price: Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photo: ProductImageWhereInput
  status: StringNullableFilter
  price: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForUpdateInput
  status: String
  price: Int
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForCreateInput
  status: String
  price: Int
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProcessProduct {
  id: ID!
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmType
  filmColour: FilmColour
  scanResolution: ScanResolution
  singleQuantity: Int
  status: String
  orderStatus: OrderStatus
  order: Order
  user: User
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

input ProcessProductWhereUniqueInput {
  id: ID
}

input ProcessProductWhereInput {
  AND: [ProcessProductWhereInput!]
  OR: [ProcessProductWhereInput!]
  NOT: [ProcessProductWhereInput!]
  id: IDFilter
  notes: StringFilter
  noDevelop: BooleanFilter
  noScans: BooleanFilter
  isSingle: BooleanFilter
  isSlide: BooleanFilter
  filmType: FilmTypeWhereInput
  filmColour: FilmColourWhereInput
  scanResolution: ScanResolutionWhereInput
  singleQuantity: IntNullableFilter
  status: StringNullableFilter
  orderStatus: OrderStatusWhereInput
  order: OrderWhereInput
  user: UserWhereInput
  price: IntNullableFilter
  createdOn: DateTimeNullableFilter
  updatedOn: DateTimeNullableFilter
}

input ProcessProductOrderByInput {
  id: OrderDirection
  notes: OrderDirection
  noDevelop: OrderDirection
  noScans: OrderDirection
  isSingle: OrderDirection
  isSlide: OrderDirection
  singleQuantity: OrderDirection
  status: OrderDirection
  price: OrderDirection
  createdOn: OrderDirection
  updatedOn: OrderDirection
}

input ProcessProductUpdateInput {
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmTypeRelateToOneForUpdateInput
  filmColour: FilmColourRelateToOneForUpdateInput
  scanResolution: ScanResolutionRelateToOneForUpdateInput
  singleQuantity: Int
  status: String
  orderStatus: OrderStatusRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

input FilmTypeRelateToOneForUpdateInput {
  create: FilmTypeCreateInput
  connect: FilmTypeWhereUniqueInput
  disconnect: Boolean
}

input FilmColourRelateToOneForUpdateInput {
  create: FilmColourCreateInput
  connect: FilmColourWhereUniqueInput
  disconnect: Boolean
}

input ScanResolutionRelateToOneForUpdateInput {
  create: ScanResolutionCreateInput
  connect: ScanResolutionWhereUniqueInput
  disconnect: Boolean
}

input OrderStatusRelateToOneForUpdateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProcessProductUpdateArgs {
  where: ProcessProductWhereUniqueInput!
  data: ProcessProductUpdateInput!
}

input ProcessProductCreateInput {
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmTypeRelateToOneForCreateInput
  filmColour: FilmColourRelateToOneForCreateInput
  scanResolution: ScanResolutionRelateToOneForCreateInput
  singleQuantity: Int
  status: String
  orderStatus: OrderStatusRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

input FilmTypeRelateToOneForCreateInput {
  create: FilmTypeCreateInput
  connect: FilmTypeWhereUniqueInput
}

input FilmColourRelateToOneForCreateInput {
  create: FilmColourCreateInput
  connect: FilmColourWhereUniqueInput
}

input ScanResolutionRelateToOneForCreateInput {
  create: ScanResolutionCreateInput
  connect: ScanResolutionWhereUniqueInput
}

input OrderStatusRelateToOneForCreateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type CartProcessProduct {
  id: ID!
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmType
  filmColour: FilmColour
  scanResolution: ScanResolution
  singleQuantity: Int
  status: String
  user: User
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

input CartProcessProductWhereUniqueInput {
  id: ID
}

input CartProcessProductWhereInput {
  AND: [CartProcessProductWhereInput!]
  OR: [CartProcessProductWhereInput!]
  NOT: [CartProcessProductWhereInput!]
  id: IDFilter
  notes: StringFilter
  noDevelop: BooleanFilter
  noScans: BooleanFilter
  isSingle: BooleanFilter
  isSlide: BooleanFilter
  filmType: FilmTypeWhereInput
  filmColour: FilmColourWhereInput
  scanResolution: ScanResolutionWhereInput
  singleQuantity: IntNullableFilter
  status: StringNullableFilter
  user: UserWhereInput
  price: IntNullableFilter
  createdOn: DateTimeNullableFilter
  updatedOn: DateTimeNullableFilter
}

input CartProcessProductOrderByInput {
  id: OrderDirection
  notes: OrderDirection
  noDevelop: OrderDirection
  noScans: OrderDirection
  isSingle: OrderDirection
  isSlide: OrderDirection
  singleQuantity: OrderDirection
  status: OrderDirection
  price: OrderDirection
  createdOn: OrderDirection
  updatedOn: OrderDirection
}

input CartProcessProductUpdateInput {
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmTypeRelateToOneForUpdateInput
  filmColour: FilmColourRelateToOneForUpdateInput
  scanResolution: ScanResolutionRelateToOneForUpdateInput
  singleQuantity: Int
  status: String
  user: UserRelateToOneForUpdateInput
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

input CartProcessProductUpdateArgs {
  where: CartProcessProductWhereUniqueInput!
  data: CartProcessProductUpdateInput!
}

input CartProcessProductCreateInput {
  notes: String
  noDevelop: Boolean
  noScans: Boolean
  isSingle: Boolean
  isSlide: Boolean
  filmType: FilmTypeRelateToOneForCreateInput
  filmColour: FilmColourRelateToOneForCreateInput
  scanResolution: ScanResolutionRelateToOneForCreateInput
  singleQuantity: Int
  status: String
  user: UserRelateToOneForCreateInput
  price: Int
  createdOn: DateTime
  updatedOn: DateTime
}

type FilmColour {
  id: ID!
  name: String
  description: String
  developCost: Int
}

input FilmColourWhereUniqueInput {
  id: ID
}

input FilmColourWhereInput {
  AND: [FilmColourWhereInput!]
  OR: [FilmColourWhereInput!]
  NOT: [FilmColourWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  developCost: IntNullableFilter
}

input FilmColourOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  developCost: OrderDirection
}

input FilmColourUpdateInput {
  name: String
  description: String
  developCost: Int
}

input FilmColourUpdateArgs {
  where: FilmColourWhereUniqueInput!
  data: FilmColourUpdateInput!
}

input FilmColourCreateInput {
  name: String
  description: String
  developCost: Int
}

type FilmType {
  id: ID!
  name: String
  description: String
  isSingle: Boolean
  isSlide: Boolean
  scanOnlyCost: Int
}

input FilmTypeWhereUniqueInput {
  id: ID
}

input FilmTypeWhereInput {
  AND: [FilmTypeWhereInput!]
  OR: [FilmTypeWhereInput!]
  NOT: [FilmTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  isSingle: BooleanFilter
  isSlide: BooleanFilter
  scanOnlyCost: IntNullableFilter
}

input FilmTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  isSingle: OrderDirection
  isSlide: OrderDirection
  scanOnlyCost: OrderDirection
}

input FilmTypeUpdateInput {
  name: String
  description: String
  isSingle: Boolean
  isSlide: Boolean
  scanOnlyCost: Int
}

input FilmTypeUpdateArgs {
  where: FilmTypeWhereUniqueInput!
  data: FilmTypeUpdateInput!
}

input FilmTypeCreateInput {
  name: String
  description: String
  isSingle: Boolean
  isSlide: Boolean
  scanOnlyCost: Int
}

type ScanResolution {
  id: ID!
  name: String
  description: String
  scanCost: Int
  scanOnlyCost: Int
  singleFrameCost: Int
}

input ScanResolutionWhereUniqueInput {
  id: ID
}

input ScanResolutionWhereInput {
  AND: [ScanResolutionWhereInput!]
  OR: [ScanResolutionWhereInput!]
  NOT: [ScanResolutionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  scanCost: IntNullableFilter
  scanOnlyCost: IntNullableFilter
  singleFrameCost: IntNullableFilter
}

input ScanResolutionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  scanCost: OrderDirection
  scanOnlyCost: OrderDirection
  singleFrameCost: OrderDirection
}

input ScanResolutionUpdateInput {
  name: String
  description: String
  scanCost: Int
  scanOnlyCost: Int
  singleFrameCost: Int
}

input ScanResolutionUpdateArgs {
  where: ScanResolutionWhereUniqueInput!
  data: ScanResolutionUpdateInput!
}

input ScanResolutionCreateInput {
  name: String
  description: String
  scanCost: Int
  scanOnlyCost: Int
  singleFrameCost: Int
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  product: ProductWhereInput
  user: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

type OrderStatus {
  id: ID!
  name: String
  description: String
  orders(
    where: ProcessProductWhereInput! = {}
    orderBy: [ProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProcessProduct!]
  ordersCount(where: ProcessProductWhereInput! = {}): Int
}

input OrderStatusWhereUniqueInput {
  id: ID
}

input OrderStatusWhereInput {
  AND: [OrderStatusWhereInput!]
  OR: [OrderStatusWhereInput!]
  NOT: [OrderStatusWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  orders: ProcessProductManyRelationFilter
}

input OrderStatusOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input OrderStatusUpdateInput {
  name: String
  description: String
  orders: ProcessProductRelateToManyForUpdateInput
}

input OrderStatusUpdateArgs {
  where: OrderStatusWhereUniqueInput!
  data: OrderStatusUpdateInput!
}

input OrderStatusCreateInput {
  name: String
  description: String
  orders: ProcessProductRelateToManyForCreateInput
}

type Order {
  id: ID!
  total: Int
  processProducts(
    where: ProcessProductWhereInput! = {}
    orderBy: [ProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProcessProduct!]
  processProductsCount(where: ProcessProductWhereInput! = {}): Int
  user: User
  charge: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  total: IntNullableFilter
  processProducts: ProcessProductManyRelationFilter
  user: UserWhereInput
  charge: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  total: OrderDirection
  charge: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  total: Int
  processProducts: ProcessProductRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  charge: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  total: Int
  processProducts: ProcessProductRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  charge: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  processProducts(
    where: ProcessProductWhereInput! = {}
    orderBy: [ProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProcessProduct!]
  processProduct(where: ProcessProductWhereUniqueInput!): ProcessProduct
  processProductsCount(where: ProcessProductWhereInput! = {}): Int
  cartProcessProducts(
    where: CartProcessProductWhereInput! = {}
    orderBy: [CartProcessProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartProcessProduct!]
  cartProcessProduct(
    where: CartProcessProductWhereUniqueInput!
  ): CartProcessProduct
  cartProcessProductsCount(where: CartProcessProductWhereInput! = {}): Int
  filmColours(
    where: FilmColourWhereInput! = {}
    orderBy: [FilmColourOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FilmColour!]
  filmColour(where: FilmColourWhereUniqueInput!): FilmColour
  filmColoursCount(where: FilmColourWhereInput! = {}): Int
  filmTypes(
    where: FilmTypeWhereInput! = {}
    orderBy: [FilmTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FilmType!]
  filmType(where: FilmTypeWhereUniqueInput!): FilmType
  filmTypesCount(where: FilmTypeWhereInput! = {}): Int
  scanResolutions(
    where: ScanResolutionWhereInput! = {}
    orderBy: [ScanResolutionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ScanResolution!]
  scanResolution(where: ScanResolutionWhereUniqueInput!): ScanResolution
  scanResolutionsCount(where: ScanResolutionWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orderStatuses(
    where: OrderStatusWhereInput! = {}
    orderBy: [OrderStatusOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderStatus!]
  orderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  orderStatusesCount(where: OrderStatusWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
